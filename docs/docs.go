// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/signin": {
            "post": {
                "description": "вход в аккаунт по почте + паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "вход в аккаунт",
                "parameters": [
                    {
                        "description": "структура запроса",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.SignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.SignResponse"
                        }
                    },
                    "400": {
                        "description": "некорректный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "неправильный пароль",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "пользователь не найден",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "регистрация пользователя в систему",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "регистрация пользователя",
                "parameters": [
                    {
                        "description": "структура запроса",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.SignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.SignResponse"
                        }
                    },
                    "400": {
                        "description": "некорректный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "пользователь уже существует",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "requests.SignRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "email@mail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "responses.Session": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MzkzMjgyMjAsInJvbGUiOiJVU0VSIiwic3ViIjoiMyJ9.mp0uoVP-RTwOQrekQZm3PkjVnzdvUGfgnbYnT9piwaw"
                },
                "expires_at": {
                    "type": "integer",
                    "example": 1741884220
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDE4ODQyMjAsInJvbGUiOiJVU0VSIiwic3ViIjoiMyJ9.5ew-TEJ3io9kfxGQdO9F5b1KvPBW3REkutEAU9HypMQ"
                }
            }
        },
        "responses.SignResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1"
                },
                "session": {
                    "$ref": "#/definitions/responses.Session"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Auth Service",
	Description:      "service for auth users",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
